{"ast":null,"code":"var _jsxFileName = \"/Users/parth.maradia/Project/practice/todo/src/CardList.jsx\",\n  _s = $RefreshSig$();\n// display a list of cards with To-Do events input by user\nimport { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport Box from \"@mui/material/Box\";\nimport Filters from \"./Filters\";\nimport { StepperContext } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardList = ({\n  tasks,\n  setTasks,\n  pendingTasks,\n  setPendingTasks\n}) => {\n  _s();\n  // console.log(pendingTasks);\n  //   const [tasks, setTasks] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [done, setDone] = useState(false);\n  const [pending, setPending] = useState(false);\n  const [allClick, setAllClick] = useState(false);\n  useEffect(() => {\n    fetch(\"http://localhost:8000/tasks\").then(res => {\n      if (!res.ok) {\n        throw Error(\"Could not fetch the data for that resource\");\n      }\n      return res.json();\n    }).then(data => {\n      setTasks(data);\n      setIsLoading(false);\n      setError(null);\n      const updatePendingTasks = data.filter(task => task.status === false);\n      // console.log(pendingTasks.length);\n      setPendingTasks(updatePendingTasks.length);\n    }).catch(err => {\n      setIsLoading(false);\n      setError(err.message);\n    });\n  }); // Is tasks correct here?\n  // Set the status of the task to false when the task is clicked\n  const handleDoneClick = () => {\n    setDone(!done);\n    setPending(false);\n  };\n  const handlePendingClick = () => {\n    setPending(!pending);\n    setDone(false);\n  };\n\n  //   async function handleAllClick() {\n  //     let newAllClick = !allClick;\n  //     let newTasks = tasks.map((task) => ({\n  //       ...task,\n  //       status: newAllClick,\n  //     }));\n\n  //     try {\n  //       await Promise.all(\n  //         newTasks.map((element) =>\n  //           fetch(`http://localhost:8000/tasks/${element.id}`, {\n  //             method: \"PATCH\",\n  //             headers: { \"Content-Type\": \"application/json\" },\n  //             body: JSON.stringify({ status: newAllClick }),\n  //           })\n  //         )\n  //       );\n\n  //       setTasks(newTasks);\n  //       setAllClick(newAllClick);\n  //       console.log(newTasks);\n  //     } catch (error) {\n  //       console.error(\"Failed to update tasks\", error);\n  //       // Handle errors if needed\n  //     }\n  //   }\n\n  //   const handleAllClick = () => {\n  // setAllClick(!allClick);\n  // setIsPending(true);\n  // setPending(true);\n  // setDone(true);\n\n  // // Fetch all tasks from the server\n  // fetch(\"http://localhost:8000/tasks\")\n  //   .then((response) => {\n  //     if (!response.ok) {\n  //       throw new Error(\"Failed to fetch tasks\");\n  //     }\n  //     return response.json();\n  //   })\n  //   .then((tasks) => {\n  //     // Create an array of fetch requests to update each task's status\n  //     const updatePromises = tasks.map((task) =>\n  //       fetch(`http://localhost:8000/tasks/${task.id}`, {\n  //         method: \"PATCH\",\n  //         headers: { \"Content-Type\": \"application/json\" },\n  //         body: JSON.stringify({ status: allClick }),\n  //       })\n  //     );\n\n  //     // Wait for all fetch requests to complete\n  //     return Promise.all(updatePromises);\n  //   })\n  //   .then(() => {\n  //     console.log(\"All tasks updated\");\n  //     setIsPending(false);\n  //     // Update the local state to reflect the changes\n  //     setTasks((prevTasks) =>\n  //       prevTasks.map((task) => ({ ...task, status: allClick }))\n  //     );\n  //   })\n  //   .catch((error) => {\n  //     console.error(\"Error updating tasks:\", error);\n  //     setIsPending(false);\n  //   });\n  //   };\n\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-list\",\n    children: [/*#__PURE__*/_jsxDEV(Filters, {\n      handleDoneClick: handleDoneClick,\n      handlePendingClick: handlePendingClick,\n      handleAllClick: handleAllClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 1,\n        borderRadius: 2,\n        display: \"grid\",\n        gridTemplateColumns: {\n          md: \"1fr\"\n        },\n        gap: 2,\n        alignItems: \"center\",\n        // Align items in the middle\n        padding: \"5px\",\n        marginLeft: \"180px\",\n        marginRight: \"180px\",\n        marginTop: \"30px\"\n      },\n      children: [!done && !pending && tasks && tasks.map(task => /*#__PURE__*/_jsxDEV(Card, {\n        id: task.id,\n        task: task.task,\n        status: task.status\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }, this)), done && tasks && tasks.filter(task => task.status === true).map(task => /*#__PURE__*/_jsxDEV(Card, {\n        id: task.id,\n        task: task.task,\n        status: task.status\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }, this)), pending && tasks && tasks.filter(task => task.status === false).map(task => /*#__PURE__*/_jsxDEV(Card, {\n        id: task.id,\n        task: task.task,\n        status: task.status\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 15\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(CardList, \"Tj9GKO4Su13BhcgNen4FyjBeQSs=\");\n_c = CardList;\nexport default CardList;\nvar _c;\n$RefreshReg$(_c, \"CardList\");","map":{"version":3,"names":["useState","useEffect","Card","Box","Filters","StepperContext","jsxDEV","_jsxDEV","CardList","tasks","setTasks","pendingTasks","setPendingTasks","_s","isLoading","setIsLoading","error","setError","done","setDone","pending","setPending","allClick","setAllClick","fetch","then","res","ok","Error","json","data","updatePendingTasks","filter","task","status","length","catch","err","message","handleDoneClick","handlePendingClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","handleAllClick","sx","p","borderRadius","display","gridTemplateColumns","md","gap","alignItems","padding","marginLeft","marginRight","marginTop","map","id","_c","$RefreshReg$"],"sources":["/Users/parth.maradia/Project/practice/todo/src/CardList.jsx"],"sourcesContent":["// display a list of cards with To-Do events input by user\nimport { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport Box from \"@mui/material/Box\";\nimport Filters from \"./Filters\";\nimport { StepperContext } from \"@mui/material\";\n\nconst CardList = ({ tasks, setTasks, pendingTasks, setPendingTasks }) => {\n  // console.log(pendingTasks);\n  //   const [tasks, setTasks] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const [done, setDone] = useState(false);\n  const [pending, setPending] = useState(false);\n  const [allClick, setAllClick] = useState(false);\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/tasks\")\n      .then((res) => {\n        if (!res.ok) {\n          throw Error(\"Could not fetch the data for that resource\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        setTasks(data);\n        setIsLoading(false);\n        setError(null);\n        const updatePendingTasks = data.filter((task) => task.status === false);\n        // console.log(pendingTasks.length);\n        setPendingTasks(updatePendingTasks.length);\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        setError(err.message);\n      });\n  }); // Is tasks correct here?\n  // Set the status of the task to false when the task is clicked\n  const handleDoneClick = () => {\n    setDone(!done);\n    setPending(false);\n  };\n\n  const handlePendingClick = () => {\n    setPending(!pending);\n    setDone(false);\n  };\n\n//   async function handleAllClick() {\n//     let newAllClick = !allClick;\n//     let newTasks = tasks.map((task) => ({\n//       ...task,\n//       status: newAllClick,\n//     }));\n\n//     try {\n//       await Promise.all(\n//         newTasks.map((element) =>\n//           fetch(`http://localhost:8000/tasks/${element.id}`, {\n//             method: \"PATCH\",\n//             headers: { \"Content-Type\": \"application/json\" },\n//             body: JSON.stringify({ status: newAllClick }),\n//           })\n//         )\n//       );\n\n//       setTasks(newTasks);\n//       setAllClick(newAllClick);\n//       console.log(newTasks);\n//     } catch (error) {\n//       console.error(\"Failed to update tasks\", error);\n//       // Handle errors if needed\n//     }\n//   }\n\n  //   const handleAllClick = () => {\n  // setAllClick(!allClick);\n  // setIsPending(true);\n  // setPending(true);\n  // setDone(true);\n\n  // // Fetch all tasks from the server\n  // fetch(\"http://localhost:8000/tasks\")\n  //   .then((response) => {\n  //     if (!response.ok) {\n  //       throw new Error(\"Failed to fetch tasks\");\n  //     }\n  //     return response.json();\n  //   })\n  //   .then((tasks) => {\n  //     // Create an array of fetch requests to update each task's status\n  //     const updatePromises = tasks.map((task) =>\n  //       fetch(`http://localhost:8000/tasks/${task.id}`, {\n  //         method: \"PATCH\",\n  //         headers: { \"Content-Type\": \"application/json\" },\n  //         body: JSON.stringify({ status: allClick }),\n  //       })\n  //     );\n\n  //     // Wait for all fetch requests to complete\n  //     return Promise.all(updatePromises);\n  //   })\n  //   .then(() => {\n  //     console.log(\"All tasks updated\");\n  //     setIsPending(false);\n  //     // Update the local state to reflect the changes\n  //     setTasks((prevTasks) =>\n  //       prevTasks.map((task) => ({ ...task, status: allClick }))\n  //     );\n  //   })\n  //   .catch((error) => {\n  //     console.error(\"Error updating tasks:\", error);\n  //     setIsPending(false);\n  //   });\n  //   };\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>{error}</div>;\n\n  return (\n    <div className=\"card-list\">\n      <Filters\n        handleDoneClick={handleDoneClick}\n        handlePendingClick={handlePendingClick}\n        handleAllClick={handleAllClick}\n      />\n\n      <Box\n        sx={{\n          p: 1,\n          borderRadius: 2,\n          display: \"grid\",\n          gridTemplateColumns: { md: \"1fr\" },\n          gap: 2,\n          alignItems: \"center\", // Align items in the middle\n          padding: \"5px\",\n          marginLeft: \"180px\",\n          marginRight: \"180px\",\n          marginTop: \"30px\",\n        }}\n      >\n        {!done &&\n          !pending &&\n          tasks &&\n          tasks.map((task) => (\n            <Card\n              id={task.id}\n              task={task.task}\n              status={task.status}\n              key={task.id}\n            />\n          ))}\n        {done &&\n          tasks &&\n          tasks\n            .filter((task) => task.status === true)\n            .map((task) => (\n              <Card\n                id={task.id}\n                task={task.task}\n                status={task.status}\n                key={task.id}\n              />\n            ))}\n        {pending &&\n          tasks &&\n          tasks\n            .filter((task) => task.status === false)\n            .map((task) => (\n              <Card\n                id={task.id}\n                task={task.task}\n                status={task.status}\n                key={task.id}\n              />\n            ))}\n      </Box>\n    </div>\n  );\n};\n\nexport default CardList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}