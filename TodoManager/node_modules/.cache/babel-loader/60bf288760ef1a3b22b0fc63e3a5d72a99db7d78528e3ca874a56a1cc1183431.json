{"ast":null,"code":"var _jsxFileName = \"/Users/parth.maradia/Project/practice/todo/src/TextBox.jsx\",\n  _s = $RefreshSig$();\n// // Mui text field component to input user's tasks and save them to the database\nimport { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Fab from \"@mui/material/Fab\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TextBox({\n  updateTask\n}) {\n  _s();\n  const [task, setTask] = useState(\"\");\n  const [status, setStatus] = useState(false); // default status is false, meaning the task is not completed\n  const [isPending, setIsPending] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault(); // prevents the page from refreshing\n\n    // Validate the task input\n    if (!task) {\n      alert(\"Task cannot be empty\");\n      return;\n    }\n    const newTask = {\n      task,\n      status\n    }; // create a task object\n\n    setIsPending(true);\n    fetch(\"http://localhost:8000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newTask)\n    }).then(() => {\n      console.log(\"new task added\");\n      setIsPending(false);\n      setTask(\"\"); // Clear the input field after submission\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    component: \"form\",\n    noValidate: true,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"standard-basic\",\n      label: \"What's on your mind?\",\n      variant: \"standard\",\n      style: {\n        width: \"40%\",\n        paddingRight: \"10px\"\n      },\n      value: task,\n      onChange: e => setTask(e.target.value)\n      // Check if the task is not empty\n      ,\n\n      onKeyDown: e => {\n        if (e.key === \"Enter\") {\n          handleSubmit(e);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Fab, {\n      color: \"primary\",\n      \"aria-label\": \"add\",\n      onClick: handleSubmit,\n      disabled: isPending,\n      children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(TextBox, \"w1RZd+VRc25wLpyZg5li42TcJ4c=\");\n_c = TextBox;\nvar _c;\n$RefreshReg$(_c, \"TextBox\");","map":{"version":3,"names":["useState","Box","TextField","Fab","AddIcon","jsxDEV","_jsxDEV","TextBox","updateTask","_s","task","setTask","status","setStatus","isPending","setIsPending","handleSubmit","e","preventDefault","alert","newTask","fetch","method","headers","body","JSON","stringify","then","console","log","component","noValidate","autoComplete","onSubmit","children","id","label","variant","style","width","paddingRight","value","onChange","target","onKeyDown","key","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/parth.maradia/Project/practice/todo/src/TextBox.jsx"],"sourcesContent":["// // Mui text field component to input user's tasks and save them to the database\nimport { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Fab from \"@mui/material/Fab\";\nimport AddIcon from \"@mui/icons-material/Add\";\n\nexport default function TextBox({updateTask}) {\n  const [task, setTask] = useState(\"\");\n  const [status, setStatus] = useState(false); // default status is false, meaning the task is not completed\n  const [isPending, setIsPending] = useState(false);\n\n  const handleSubmit = (e) => {\n    e.preventDefault(); // prevents the page from refreshing\n\n    // Validate the task input\n    if (!task) {\n      alert(\"Task cannot be empty\");\n      return;\n    }\n\n    const newTask = { task, status }; // create a task object\n\n    setIsPending(true);\n    fetch(\"http://localhost:8000/tasks\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(newTask),\n    }).then(() => {\n      console.log(\"new task added\");\n      setIsPending(false);\n      setTask(\"\"); // Clear the input field after submission\n    });\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      noValidate\n      autoComplete=\"off\"\n      onSubmit={handleSubmit}\n    >\n      <TextField\n        id=\"standard-basic\"\n        label=\"What's on your mind?\"\n        variant=\"standard\"\n        style={{ width: \"40%\", paddingRight: \"10px\" }}\n        value={task}\n        onChange={(e) => setTask(e.target.value)}\n        // Check if the task is not empty\n        \n        onKeyDown={(e) => {\n          if (e.key === \"Enter\") {\n            handleSubmit(e);\n          }\n        }}\n      />\n      <Fab color=\"primary\" aria-label=\"add\" onClick={handleSubmit} disabled={isPending}>\n        <AddIcon />\n      </Fab>\n    </Box>\n  );\n}\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,OAAO,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,OAAOA,CAAC;EAACC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMgB,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;;IAEpB;IACA,IAAI,CAACR,IAAI,EAAE;MACTS,KAAK,CAAC,sBAAsB,CAAC;MAC7B;IACF;IAEA,MAAMC,OAAO,GAAG;MAAEV,IAAI;MAAEE;IAAO,CAAC,CAAC,CAAC;;IAElCG,YAAY,CAAC,IAAI,CAAC;IAClBM,KAAK,CAAC,6BAA6B,EAAE;MACnCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,OAAO;IAC9B,CAAC,CAAC,CAACO,IAAI,CAAC,MAAM;MACZC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7Bd,YAAY,CAAC,KAAK,CAAC;MACnBJ,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IACf,CAAC,CAAC;EACJ,CAAC;EAED,oBACEL,OAAA,CAACL,GAAG;IACF6B,SAAS,EAAC,MAAM;IAChBC,UAAU;IACVC,YAAY,EAAC,KAAK;IAClBC,QAAQ,EAAEjB,YAAa;IAAAkB,QAAA,gBAEvB5B,OAAA,CAACJ,SAAS;MACRiC,EAAE,EAAC,gBAAgB;MACnBC,KAAK,EAAC,sBAAsB;MAC5BC,OAAO,EAAC,UAAU;MAClBC,KAAK,EAAE;QAAEC,KAAK,EAAE,KAAK;QAAEC,YAAY,EAAE;MAAO,CAAE;MAC9CC,KAAK,EAAE/B,IAAK;MACZgC,QAAQ,EAAGzB,CAAC,IAAKN,OAAO,CAACM,CAAC,CAAC0B,MAAM,CAACF,KAAK;MACvC;MAAA;;MAEAG,SAAS,EAAG3B,CAAC,IAAK;QAChB,IAAIA,CAAC,CAAC4B,GAAG,KAAK,OAAO,EAAE;UACrB7B,YAAY,CAACC,CAAC,CAAC;QACjB;MACF;IAAE;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACF3C,OAAA,CAACH,GAAG;MAAC+C,KAAK,EAAC,SAAS;MAAC,cAAW,KAAK;MAACC,OAAO,EAAEnC,YAAa;MAACoC,QAAQ,EAAEtC,SAAU;MAAAoB,QAAA,eAC/E5B,OAAA,CAACF,OAAO;QAAA0C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACxC,EAAA,CAvDuBF,OAAO;AAAA8C,EAAA,GAAP9C,OAAO;AAAA,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}